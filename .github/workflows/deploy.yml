name: deploy

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: Choose log level
        required: true
        default: info
        type: choice
        options:
          - info
          - debug
      environment:
        description: Choose environment
        required: true
        default: production
        type: choice
        options:
          - production
      workflow_type:
        description: Choose workflow type
        required: true
        default: push and deploy
        type: choice
        options:
          - push and deploy
          - push only
          - deploy only
      skip_database_migrations:
        description: Skip database migrations
        required: true
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_ID: ${{ secrets.APP_ID_PREFIX }}-${{ inputs.environment }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1800
        
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set new image tag
        if: inputs.workflow_type != 'deploy only'
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set latest image tag
        if: inputs.workflow_type == 'deploy only'
        run: |
          echo "IMAGE_TAG=$(aws ecr describe-images --repository-name ${{ env.APP_ID }}-web \
            --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageTags[0]' --output text)" >> $GITHUB_ENV

      - name: Set images
        env:
          IMAGE_NAME_COMMON: ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_ID }}
        run: |
          echo "IMAGE_WEB=$IMAGE_NAME_COMMON-web:$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_NGINX=$IMAGE_NAME_COMMON-nginx:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build, tag, and push docker image to Amazon ECR
        if: inputs.workflow_type != 'deploy only'
        id: build-image
        run: |
          docker compose -p $APP_ID build web nginx
          docker tag $APP_ID-web:latest $IMAGE_WEB
          docker tag $APP_ID-nginx:latest $IMAGE_NGINX
          docker push $IMAGE_WEB
          docker push $IMAGE_NGINX

      - name: Render Amazon ECS task definition for web container
        if: inputs.workflow_type != 'push only'
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ env.APP_ID }}
          container-name: web
          image: ${{ env.IMAGE_WEB }}

      - name: Modify Amazon ECS task definition with nginx container
        if: inputs.workflow_type != 'push only'
        id: render-nginx-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          container-name: nginx
          image: ${{ env.IMAGE_NGINX }}

      - name: Get AWS VPC configuration
        if: ${{ inputs.workflow_type != 'push only' && !inputs.skip_database_migrations }}
        run: |
          VPC_CONFIG=$(aws ecs describe-services \
            --cluster ${{ env.APP_ID }} --services ${{ env.APP_ID }} \
            --query 'services[0].networkConfiguration.awsvpcConfiguration' --output json)

          [ "$VPC_CONFIG" = null ] && echo "::error::VPC configuration not found" && exit 1

          echo "SECURITY_GROUPS=$(echo $VPC_CONFIG | jq -c '.securityGroups')" >> $GITHUB_ENV
          echo "SUBNETS=$(echo $VPC_CONFIG | jq -c '.subnets')" >> $GITHUB_ENV
          echo "ASSIGN_PUBLIC_IP=$(echo $VPC_CONFIG | jq -r '.assignPublicIp')" >> $GITHUB_ENV

      - name: Run task to apply database migrations
        if: ${{ inputs.workflow_type != 'push only' && !inputs.skip_database_migrations }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-nginx-container.outputs.task-definition }}
          service: ${{ env.APP_ID }}
          cluster: ${{ env.APP_ID }}
          wait-for-service-stability: true
          run-task: true
          run-task-launch-type: FARGATE
          run-task-security-groups: ${{ env.SECURITY_GROUPS }}
          run-task-subnets: ${{ env.SUBNETS }}
          run-task-assign-public-IP: ${{ env.ASSIGN_PUBLIC_IP }}
          run-task-container-overrides: '[{"name": "web", "command": ["./bin/rails", "db:prepare"]}]'
          wait-for-task-stopped: true

      - name: Deploy to Amazon ECS
        if: inputs.workflow_type != 'push only'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-nginx-container.outputs.task-definition }}
          service: ${{ env.APP_ID }}
          cluster: ${{ env.APP_ID }}
          wait-for-service-stability: true
          desired-count: 1
