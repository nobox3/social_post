name: deploy

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: Choose log level
        required: true
        default: info
        type: choice
        options:
          - info
          - debug
      environment:
        description: Choose environment
        required: true
        default: production
        type: choice
        options:
          - production
      workflowType:
        description: Choose workflow type
        required: true
        default: push and deploy
        type: choice
        options:
          - push and deploy
          - push only
          - deploy only

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_ID: ${{ secrets.APP_ID_PREFIX }}-${{ github.event.inputs.environment }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SSM_PARAMETER_PATH: ${{ secrets.SSM_PARAMETER_PATH }}/${{ github.event.inputs.environment }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1800
        
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set new image tag
        if: github.event.inputs.workflowType != 'deploy only'
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set latest image tag
        if: github.event.inputs.workflowType == 'deploy only'
        run: |
          echo "IMAGE_TAG=$(aws ecr describe-images --repository-name ${{ env.APP_ID }}-web \
            --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageTags[0]' --output text)" >> $GITHUB_ENV

      - name: Set images
        env:
          IMAGE_NAME_COMMON: ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_ID }}
        run: |
          echo "IMAGE_WEB=$IMAGE_NAME_COMMON-web:$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_NGINX=$IMAGE_NAME_COMMON-nginx:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build, tag, and push docker image to Amazon ECR
        if: github.event.inputs.workflowType != 'deploy only'
        id: build-image
        run: |
          docker compose -p $APP_ID build web nginx
          docker tag $APP_ID-web:latest $IMAGE_WEB
          docker tag $APP_ID-nginx:latest $IMAGE_NGINX
          docker push $IMAGE_WEB
          docker push $IMAGE_NGINX

      - name: Render Amazon ECS task definition for web container
        if: github.event.inputs.workflowType != 'push only'
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ env.APP_ID }}
          container-name: web
          image: ${{ env.IMAGE_WEB }}
          environment-variables: AWS_REGION=${{ env.AWS_REGION }}
          secrets: |
            APP_HOST=${{ env.SSM_PARAMETER_PATH }}/APP_HOST
            SECRET_KEY_BASE=${{ env.SSM_PARAMETER_PATH }}/SECRET_KEY_BASE
            ENABLE_BASIC_AUTH=${{ env.SSM_PARAMETER_PATH }}/ENABLE_BASIC_AUTH
            BASIC_AUTH_USERNAME=${{ env.SSM_PARAMETER_PATH }}/BASIC_AUTH_USERNAME
            BASIC_AUTH_PASSWORD=${{ env.SSM_PARAMETER_PATH }}/BASIC_AUTH_PASSWORD
            DATABASE_HOST=${{ env.SSM_PARAMETER_PATH }}/DATABASE_HOST
            DATABASE_NAME=${{ env.SSM_PARAMETER_PATH }}/DATABASE_NAME
            DATABASE_USERNAME=${{ env.SSM_PARAMETER_PATH }}/DATABASE_USERNAME
            DATABASE_PASSWORD=${{ env.SSM_PARAMETER_PATH }}/DATABASE_PASSWORD
            REDIS_URL=${{ env.SSM_PARAMETER_PATH }}/REDIS_URL
            STORAGE_SERVICE=${{ env.SSM_PARAMETER_PATH }}/STORAGE_SERVICE
            AWS_S3_BUCKET=${{ env.SSM_PARAMETER_PATH }}/AWS_S3_BUCKET
            CDN_HOST=${{ env.SSM_PARAMETER_PATH }}/CDN_HOST
            GOOGLE_OAUTH_CLIENT_ID=${{ env.SSM_PARAMETER_PATH }}/GOOGLE_OAUTH_CLIENT_ID
            GOOGLE_OAUTH_CLIENT_SECRET=${{ env.SSM_PARAMETER_PATH }}/GOOGLE_OAUTH_CLIENT_SECRET
            SENDGRID_API_KEY=${{ env.SSM_PARAMETER_PATH }}/SENDGRID_API_KEY
            SENDGRID_SUBSCRIPTION_WEBHOOK_VERIFICATION_KEY=${{ env.SSM_PARAMETER_PATH }}/SENDGRID_SUBSCRIPTION_WEBHOOK_VERIFICATION_KEY

      - name: Modify Amazon ECS task definition with nginx container
        if: github.event.inputs.workflowType != 'push only'
        id: render-nginx-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          container-name: nginx
          image: ${{ env.IMAGE_NGINX }}
          # https://github.com/aws-actions/amazon-ecs-render-task-definition/issues/347
          environment-variables: DUMMY_VAR=placeholder
          secrets: |
            APP_HOST=${{ env.SSM_PARAMETER_PATH }}/APP_HOST
            VPC_CIDR=${{ env.SSM_PARAMETER_PATH }}/VPC_CIDR

      - name: Deploy to Amazon ECS service
        if: github.event.inputs.workflowType != 'push only'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-nginx-container.outputs.task-definition }}
          service: ${{ env.APP_ID }}
          cluster: ${{ env.APP_ID }}
          wait-for-service-stability: true
          desired-count: 1
